declare type Source = {
    [key: string]: any;
};
declare type Result<T> = {
    [K in keyof T]: any;
};
declare type Path = string;
declare type Modifier = (value: any, source: any) => any;
declare type Include = (value: any, source: any) => boolean;
export declare type SchemaEntry = Path | {
    path: Path;
    modifier?: Modifier;
    include?: Include;
};
declare type Schema = {
    [key: string]: SchemaEntry;
};
interface MappetOptions {
    strict?: boolean;
    greedy?: boolean;
    name?: string;
}
export default function mappet<S extends Schema>(schema: S, options?: MappetOptions): (source: Source) => Result<S>;
export {};
